window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "brimfile", "modulename": "brimfile", "kind": "module", "doc": "<h2 id=\"what-is-brimfile\">What is brimfile?</h2>\n\n<p><em>brimfile</em> is a Python library to read from and write to brim files,\nwhich contain both the spectra and analysed data for Brillouin imaging.\nMore information about the brim file format can be found <a href=\"https://github.com/prevedel-lab/Brillouin-standard-file\">here</a>.</p>\n\n<p>Briefly, a brim file can contain multiple data groups,\ntypically corresponding to imaging of the same sample at different timepoints/conditions.\nEach data group contains the spectral data as well as the metadata and\nthe results of the analysis on the spectral data (which can be many in case multiple reconstruction pipelines are performed).</p>\n\n<p>The structure of the <em>brimfile</em> library reflects the structure of the brim file and the user can access the data,\nmetadata and analysis results through their corresponding classes.</p>\n\n<ul>\n<li><a href=\"#file\">File</a>: represents a brim file, which can be opened or created.</li>\n<li><a href=\"#data\">Data</a>: represents a data group in the brim file, which contains the spectral data and metadata.</li>\n<li><a href=\"#metadata\">Metadata</a>: represents the metadata associated to a data group (or to the whole file).</li>\n<li><a href=\"#analysisresults\">AnalysysResults</a>: represents the results of the analysis of the spectral data.</li>\n</ul>\n\n<h2 id=\"install-brimfile\">Install brimfile</h2>\n\n<p>Simply run:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>brimfile\n</code></pre>\n</div>\n\n<p>If you also need the support for exporting the analyzed data to OME-Tiff files,\nyou can install the optional dependencies with:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>brimfile<span class=\"o\">[</span>export-tiff<span class=\"o\">]</span>\n</code></pre>\n</div>\n\n<h2 id=\"use-brimfile\">Use brimfile</h2>\n\n<h3 id=\"file\">File</h3>\n\n<p>The main class is <code>brimfile.file.File</code>, which represents a brim file.\nIt can be used to create a new brim file (<code>brimfile.file.File.create</code>) or to open an existing one (<code>brimfile.file.File.__init__</code>).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">brimfile</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">brim</span>\n\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;path/to/your/file.brim.zip&#39;</span>\n\n<span class=\"c1\"># Open an existing brim file</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">brim</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or create a new one</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">brim</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">store_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;zip&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"data\">Data</h3>\n\n<p>You can then get a <code>brimfile.data.Data</code> object representing the data group in the brim file\neither by getting an existing one (<code>brimfile.file.File.get_data</code>) or creating a new one (<code>brimfile.file.File.create_data_group</code>).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Get the first data group in the file</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or create a new one</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">create_data_group</span><span class=\"p\">(</span><span class=\"n\">PSD</span><span class=\"p\">,</span> <span class=\"n\">freq_GHz</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">dz</span><span class=\"p\">,</span> <span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"n\">dx</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;my_data_group&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>You can get the spectrum corresponding to a pixel in the image by calling the <code>brimfile.data.Data.get_spectrum_in_image</code> method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">PSD</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"p\">,</span> <span class=\"n\">PSD_units</span><span class=\"p\">,</span> <span class=\"n\">frequency_units</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_spectrum_in_image</span><span class=\"p\">((</span><span class=\"n\">pz</span><span class=\"p\">,</span><span class=\"n\">py</span><span class=\"p\">,</span><span class=\"n\">px</span><span class=\"p\">))</span>    \n</code></pre>\n</div>\n\n<h3 id=\"metadata\">Metadata</h3>\n\n<p>You can then get a <code>brimfile.metadata.Metadata</code> object by simply calling the <code>brimfile.data.Data.get_metadata</code> method on a previously retrieved <code>Data</code> object.\nThe returned Metadata object contains all the metadata associated with the file and the data group.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_metadata</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>The list of available metadata is defined <a href=\"https://github.com/prevedel-lab/Brillouin-standard-file/blob/main/docs/brim_file_metadata.md\">here</a>.</p>\n\n<p>New metadata can be added to the current data group (or to the whole file) by calling the <code>brimfile.metadata.Metadata.add</code> method.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">datetime</span>\n\n<span class=\"n\">Attr</span> <span class=\"o\">=</span> <span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Item</span>\n<span class=\"n\">datetime_now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span>\n<span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Attr</span><span class=\"p\">(</span><span class=\"mf\">22.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">Experiment</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Datetime&#39;</span><span class=\"p\">:</span><span class=\"n\">datetime_now</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Temperature&#39;</span><span class=\"p\">:</span><span class=\"n\">temp</span><span class=\"p\">},</span><span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>A single metadata item can be retrieved by indexing the <code>Metadata</code> object, which takes a string in the format 'group.object', e.g. 'Experiment.Datetime'.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;Experiment.Datetime&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>A dictionary containing all metadata can be retrieved by calling the <code>brimfile.metadata.Metadata.all_to_dict</code> method.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">all_to_dict</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h3 id=\"analysisresults\">AnalysisResults</h3>\n\n<p>The results of the analysis can be accessed through the <code>brimfile.data.Data.AnalysisResults</code> object, obtained by calling the <code>brimfile.data.Data.get_analysis_results</code> method on a previously retrieved <code>Data</code> object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">analysis_results</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_analysis_results</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>or create a new one by calling the <code>brimfile.data.Data.create_analysis_results_group_raw</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">analysis_results</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">create_analysis_results_group_raw</span><span class=\"p\">(</span><span class=\"n\">shift</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;my_analysis_results&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><code>AnalysisResults</code> also exposes a method to retrieve the images of the analysis results (<code>brimfile.data.Data.AnalysisResults.get_image</code>):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ar_cls</span> <span class=\"o\">=</span> <span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">px_size</span> <span class=\"o\">=</span> <span class=\"n\">analysis_results</span><span class=\"o\">.</span><span class=\"n\">get_image</span><span class=\"p\">(</span><span class=\"n\">ar_cls</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"o\">.</span><span class=\"n\">Shift</span><span class=\"p\">,</span> <span class=\"n\">ar_cls</span><span class=\"o\">.</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"list-the-contents-of-a-brim-file\">List the contents of a brim file</h2>\n\n<p>The <em>brimfile</em> library provides methods to list the contents of a brim file.</p>\n\n<p>To list all the data groups in a brim file, you can use the <code>brimfile.file.File.list_data_groups</code> method.</p>\n\n<p>Once you have a <code>Data</code> object, you can list the analysis results in it by calling the <code>brimfile.data.Data.list_AnalysisResults</code> method.</p>\n\n<p>Once you have an <code>AnalysisResults</code> object, you can determine:</p>\n\n<ul>\n<li>if the Stokes and/or anti-Stokes peaks are present by calling the <code>brimfile.data.Data.AnalysisResults.list_existing_peak_types</code> method;</li>\n<li>the available quantities (e.g. shift, linewidth, etc...) in the analysis results by calling the <code>brimfile.data.Data.AnalysisResults.list_existing_quantities</code> method.</li>\n</ul>\n\n<h2 id=\"example-code\">Example code</h2>\n\n<p>Here is a simple example which creates a brim file with a data group and some metadata and then reads it back.</p>\n\n<p>We first write a function to generate some dummy data:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">generate_data</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">lorentzian</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">x0</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">Nx</span><span class=\"p\">,</span> <span class=\"n\">Ny</span><span class=\"p\">,</span> <span class=\"n\">Nz</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># Number of points in x,y,z</span>\n    <span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"n\">dz</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># Stepsizes (in um)</span>\n    <span class=\"n\">n_points</span> <span class=\"o\">=</span> <span class=\"n\">Nx</span><span class=\"o\">*</span><span class=\"n\">Ny</span><span class=\"o\">*</span><span class=\"n\">Nz</span>  <span class=\"c1\"># total number of points</span>\n\n    <span class=\"n\">width_GHz</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span>\n    <span class=\"n\">width_GHz_arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">,</span> <span class=\"n\">width_GHz</span><span class=\"p\">)</span>\n    <span class=\"n\">shift_GHz_arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">)</span>\n    <span class=\"n\">freq_GHz</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">151</span><span class=\"p\">)</span>  <span class=\"c1\"># 151 frequency points</span>\n    <span class=\"n\">PSD</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">Nz</span><span class=\"p\">,</span> <span class=\"n\">Ny</span><span class=\"p\">,</span> <span class=\"n\">Nx</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq_GHz</span><span class=\"p\">)))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Nz</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Ny</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Nx</span><span class=\"p\">):</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"n\">Nx</span><span class=\"o\">*</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">Ny</span><span class=\"o\">*</span><span class=\"n\">Nx</span><span class=\"o\">*</span><span class=\"n\">i</span>\n                <span class=\"c1\">#let&#39;s increase the shift linearly to have a readout </span>\n                <span class=\"n\">shift_GHz</span> <span class=\"o\">=</span> <span class=\"n\">freq_GHz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">freq_GHz</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">freq_GHz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">index</span><span class=\"o\">/</span><span class=\"n\">n_points</span>\n                <span class=\"n\">spectrum</span> <span class=\"o\">=</span> <span class=\"n\">lorentzian</span><span class=\"p\">(</span><span class=\"n\">freq_GHz</span><span class=\"p\">,</span> <span class=\"n\">shift_GHz</span><span class=\"p\">,</span> <span class=\"n\">width_GHz</span><span class=\"p\">)</span>\n                <span class=\"n\">shift_GHz_arr</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">shift_GHz</span> \n                <span class=\"n\">PSD</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,:]</span> <span class=\"o\">=</span> <span class=\"n\">spectrum</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">PSD</span><span class=\"p\">,</span> <span class=\"n\">freq_GHz</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">dz</span><span class=\"p\">,</span><span class=\"n\">dy</span><span class=\"p\">,</span><span class=\"n\">dx</span><span class=\"p\">),</span> <span class=\"n\">shift_GHz_arr</span><span class=\"p\">,</span> <span class=\"n\">width_GHz_arr</span>\n</code></pre>\n</div>\n\n<p>Now we can use this function to create a brim file with a data group and some metadata:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">brimfile</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">Data</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span>\n    <span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">datetime</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n    <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;path/to/your/file.brim.zip&#39;</span> \n\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">store_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">PSD</span><span class=\"p\">,</span> <span class=\"n\">freq_GHz</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">dz</span><span class=\"p\">,</span><span class=\"n\">dy</span><span class=\"p\">,</span><span class=\"n\">dx</span><span class=\"p\">),</span> <span class=\"n\">shift_GHz</span><span class=\"p\">,</span> <span class=\"n\">width_GHz</span> <span class=\"o\">=</span> <span class=\"n\">generate_data</span><span class=\"p\">()</span>\n\n    <span class=\"n\">d0</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">create_data_group</span><span class=\"p\">(</span><span class=\"n\">PSD</span><span class=\"p\">,</span> <span class=\"n\">freq_GHz</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">dz</span><span class=\"p\">,</span><span class=\"n\">dy</span><span class=\"p\">,</span><span class=\"n\">dx</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;test1&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create the metadata</span>\n    <span class=\"n\">Attr</span> <span class=\"o\">=</span> <span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Item</span>\n    <span class=\"n\">datetime_now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Attr</span><span class=\"p\">(</span><span class=\"mf\">22.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"n\">d0</span><span class=\"o\">.</span><span class=\"n\">get_metadata</span><span class=\"p\">()</span>\n\n    <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">Experiment</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Datetime&#39;</span><span class=\"p\">:</span><span class=\"n\">datetime_now</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Temperature&#39;</span><span class=\"p\">:</span><span class=\"n\">temp</span><span class=\"p\">})</span>\n    <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">Optics</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Wavelength&#39;</span><span class=\"p\">:</span><span class=\"n\">Attr</span><span class=\"p\">(</span><span class=\"mi\">660</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nm&#39;</span><span class=\"p\">)})</span>\n    <span class=\"c1\"># Add some metadata to the local data group   </span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Attr</span><span class=\"p\">(</span><span class=\"mf\">37.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">Experiment</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Temperature&#39;</span><span class=\"p\">:</span><span class=\"n\">temp</span><span class=\"p\">},</span> <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># create the analysis results</span>\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">d0</span><span class=\"o\">.</span><span class=\"n\">create_analysis_results_group_raw</span><span class=\"p\">(({</span><span class=\"s1\">&#39;shift&#39;</span><span class=\"p\">:</span><span class=\"n\">shift_GHz</span><span class=\"p\">,</span> <span class=\"s1\">&#39;shift_units&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GHz&#39;</span><span class=\"p\">,</span>\n                                             <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span> <span class=\"n\">width_GHz</span><span class=\"p\">,</span> <span class=\"s1\">&#39;width_units&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Hz&#39;</span><span class=\"p\">},),</span>\n                                             <span class=\"p\">({</span><span class=\"s1\">&#39;shift&#39;</span><span class=\"p\">:</span><span class=\"n\">shift_GHz</span><span class=\"p\">,</span> <span class=\"s1\">&#39;shift_units&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GHz&#39;</span><span class=\"p\">,</span>\n                                             <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span> <span class=\"n\">width_GHz</span><span class=\"p\">,</span> <span class=\"s1\">&#39;width_units&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Hz&#39;</span><span class=\"p\">},),</span>\n                                             <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;test1_analysis&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>and we can read it back:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">brimfile</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">Data</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span>\n\n    <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;path/to/your/file.brim.zip&#39;</span> \n\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># check if the file is read only</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">is_read_only</span><span class=\"p\">()</span>\n\n    <span class=\"c1\">#list all the data groups in the file</span>\n    <span class=\"n\">data_groups</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">list_data_groups</span><span class=\"p\">(</span><span class=\"n\">retrieve_custom_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get the first data group in the file</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n    <span class=\"c1\"># get the name of the data group</span>\n    <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get the number of parameters which the spectra depend on</span>\n    <span class=\"n\">n_pars</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_num_parameters</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get the metadata </span>\n    <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_metadata</span><span class=\"p\">()</span>\n    <span class=\"n\">all_metadata</span> <span class=\"o\">=</span> <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">all_to_dict</span><span class=\"p\">()</span>\n    <span class=\"c1\"># the list of metadata is defined here https://github.com/prevedel-lab/Brillouin-standard-file/blob/main/docs/brim_file_metadata.md</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">md</span><span class=\"p\">[</span><span class=\"s1\">&#39;Experiment.Datetime&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">units</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">md</span><span class=\"p\">[</span><span class=\"s1\">&#39;Experiment.Temperature&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">md_dict</span> <span class=\"o\">=</span> <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">Experiment</span><span class=\"p\">)</span>\n\n\n    <span class=\"c1\">#get the list of analysis results in the data group</span>\n    <span class=\"n\">ar_list</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">list_AnalysisResults</span><span class=\"p\">(</span><span class=\"n\">retrieve_custom_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># get the first analysis results in the data group</span>\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_analysis_results</span><span class=\"p\">()</span>\n    <span class=\"c1\"># get the name of the analysis results</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span>\n    <span class=\"c1\"># list the existing peak types and quantities in the analysis results</span>\n    <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">list_existing_peak_types</span><span class=\"p\">()</span>\n    <span class=\"n\">qt</span> <span class=\"o\">=</span> <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">list_existing_quantities</span><span class=\"p\">()</span>\n    <span class=\"c1\"># get the image of the shift quantity for the average of the Stokes and anti-Stokes peaks</span>\n    <span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">px_size</span> <span class=\"o\">=</span> <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get_image</span><span class=\"p\">(</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"o\">.</span><span class=\"n\">Shift</span><span class=\"p\">,</span> <span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">)</span>\n    <span class=\"c1\"># get the units of the shift quantity</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get_units</span><span class=\"p\">(</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"o\">.</span><span class=\"n\">Shift</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get a quantity at a specific pixel (coord) in the image</span>\n    <span class=\"n\">coord</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">qt_at_px</span> <span class=\"o\">=</span> <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get_quantity_at_pixel</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">,</span> <span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"o\">.</span><span class=\"n\">Shift</span><span class=\"p\">,</span> <span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">coord</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">qt_at_px</span>\n\n    <span class=\"c1\"># get the spectrum in the image at a specific pixel (coord)</span>\n    <span class=\"n\">PSD</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"p\">,</span> <span class=\"n\">PSD_units</span><span class=\"p\">,</span> <span class=\"n\">frequency_units</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_spectrum_in_image</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">)</span>    \n\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"export-the-data-to-a-different-format\">Export the data to a different format</h2>\n\n<h3 id=\"ome-tiff\">OME-TIFF</h3>\n\n<p>You can export a specific quantity in the analyzed data to OME-TIFF files using the <code>brimfile.data.Data.AnalysisResults.save_image_to_OMETiff</code> method on an instance <code>ar</code> of the <code>AnalysisResults</code> class.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ar_cls</span> <span class=\"o\">=</span> <span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span>\n<span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">save_image_to_OMETiff</span><span class=\"p\">(</span><span class=\"n\">ar_cls</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"o\">.</span><span class=\"n\">Shift</span><span class=\"p\">,</span> <span class=\"n\">ar_cls</span><span class=\"o\">.</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;path/to/your/exported_tiff&#39;</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "brimfile.constants", "modulename": "brimfile.constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.constants.reserved_attr_names", "modulename": "brimfile.constants", "qualname": "reserved_attr_names", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;Units&#x27;, &#x27;Name&#x27;)"}, {"fullname": "brimfile.constants.brim_obj_names", "modulename": "brimfile.constants", "qualname": "brim_obj_names", "kind": "class", "doc": "<p>This class contains the names of the objects in the brim file.</p>\n"}, {"fullname": "brimfile.constants.brim_obj_names.Brillouin_base_path", "modulename": "brimfile.constants", "qualname": "brim_obj_names.Brillouin_base_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Brillouin_data/&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data", "kind": "class", "doc": "<p>This class contains the names of the data groups in the brim file.</p>\n"}, {"fullname": "brimfile.constants.brim_obj_names.data.base_group", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.base_group", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Data&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data.PSD", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.PSD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PSD&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data.frequency", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.frequency", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Frequency&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data.parameters", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.parameters", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Parameters&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data.analysis_results", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.analysis_results", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Analysis&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data.spatial_map", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.spatial_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Scanning/Spatial_map&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.data.cartesian_visualisation", "modulename": "brimfile.constants", "qualname": "brim_obj_names.data.cartesian_visualisation", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Scanning/Cartesian_visualisation&#x27;"}, {"fullname": "brimfile.constants.brim_obj_names.metadata", "modulename": "brimfile.constants", "qualname": "brim_obj_names.metadata", "kind": "class", "doc": "<p>This class contains the names of the metadata groups in the brim file.</p>\n"}, {"fullname": "brimfile.constants.brim_obj_names.metadata.base_group", "modulename": "brimfile.constants", "qualname": "brim_obj_names.metadata.base_group", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Metadata&#x27;"}, {"fullname": "brimfile.data", "modulename": "brimfile.data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.data.Data", "modulename": "brimfile.data", "qualname": "Data", "kind": "class", "doc": "<p>Represents a data group within the brim file.</p>\n"}, {"fullname": "brimfile.data.Data.__init__", "modulename": "brimfile.data", "qualname": "Data.__init__", "kind": "function", "doc": "<p>Initialize the Data object. This constructor should not be called directly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file (File):</strong>  The parent File object.</li>\n<li><strong>path (str):</strong>  The path to the data group within the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "brimfile.data.Data.get_name", "modulename": "brimfile.data", "qualname": "Data.get_name", "kind": "function", "doc": "<p>Returns the name of the data group.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.get_spectrum", "modulename": "brimfile.data", "qualname": "Data.get_spectrum", "kind": "function", "doc": "<p>Retrieve a spectrum from the data group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (int):</strong>  The index of the spectrum to retrieve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: (PSD, frequency, PSD_units, frequency_units) for the specified index. \n          PSD can be 1D or more (if there are additional parameters);\n          frequency has the same size as PSD</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.get_spectrum_in_image", "modulename": "brimfile.data", "qualname": "Data.get_spectrum_in_image", "kind": "function", "doc": "<p>Retrieve a spectrum from the data group using spatial coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>coor (tuple):</strong>  A tuple containing the z, y, x coordinates of the spectrum to retrieve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing the PSD, frequency, PSD_units, frequency_units for the specified coordinates. See \"get_spectrum\" for details.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coor</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults", "kind": "class", "doc": "<p>Rapresents the analysis results associated with a Data object.</p>\n"}, {"fullname": "brimfile.data.Data.AnalysisResults.__init__", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.__init__", "kind": "function", "doc": "<p>Initialize the AnalysisResults object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file (File):</strong>  The parent File object.</li>\n<li><strong>full_path (str):</strong>  path of the group storing the analysis results</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>,</span><span class=\"param\">\t<span class=\"n\">full_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">spatial_map</span>,</span><span class=\"param\">\t<span class=\"n\">spatial_map_px_size</span></span>)</span>"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity", "kind": "class", "doc": "<p>Enum representing the type of analysis results.</p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.Shift", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.Shift", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.Shift: &#x27;Shift&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.Width", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.Width", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.Width: &#x27;Width&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.Amplitude", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.Amplitude", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.Amplitude: &#x27;Amplitude&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.Offset", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.Offset", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.Offset: &#x27;Offset&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.R2", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.R2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.R2: &#x27;R2&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.RMSE", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.RMSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.RMSE: &#x27;RMSE&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.Quantity.Cov_matrix", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.Quantity.Cov_matrix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Quantity.Cov_matrix: &#x27;Cov_matrix&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.PeakType", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.PeakType", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.data.Data.AnalysisResults.PeakType.AntiStokes", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.PeakType.AntiStokes", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PeakType.AntiStokes: &#x27;AS&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.PeakType.Stokes", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.PeakType.Stokes", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PeakType.Stokes: &#x27;S&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.PeakType.average", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.PeakType.average", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PeakType.average: &#x27;avg&#x27;&gt;"}, {"fullname": "brimfile.data.Data.AnalysisResults.get_name", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.get_name", "kind": "function", "doc": "<p>Returns the name of the Analysis group.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.add_data", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.add_data", "kind": "function", "doc": "<p>Adds data for the analysis results for AntiStokes and Stokes peaks to the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_AntiStokes (list[dict]):</strong>  A list of dictionaries containing analysis results </li>\n<li>for AntiStokes peaks. Each element of the list corresponds to a single peak that was fitted.</li>\n<li>In case only one peak was fitted it must be a list with a single element.</li>\n<li><strong>Each dictionary may include the following keys (plus the corresponding units,  e.g. 'shift_units'):</strong> </li>\n<li><strong>- 'shift':</strong>  The shift value.</li>\n<li><strong>- 'width':</strong>  The width value.</li>\n<li><strong>- 'amplitude':</strong>  The amplitude value.</li>\n<li><strong>- 'offset':</strong>  The offset value.</li>\n<li><strong>- 'R2':</strong>  The R-squared value.</li>\n<li><strong>- 'RMSE':</strong>  The root mean square error value.</li>\n<li><strong>- 'Cov_matrix':</strong>  The covariance matrix.</li>\n<li><strong>data_Stokes (list[dict], optional):</strong>  same as <code>data_AntiStokes</code> for the Stokes peaks.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_AntiStokes</span>, </span><span class=\"param\"><span class=\"n\">data_Stokes</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.get_units", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.get_units", "kind": "function", "doc": "<p>Retrieve the units of a specified quantity from the data file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qt (Quantity):</strong>  The quantity for which the units are to be retrieved.</li>\n<li><strong>pt (PeakType, optional):</strong>  The type of peak (e.g., Stokes or AntiStokes). Defaults to PeakType.AntiStokes.</li>\n<li><strong>index (int, optional):</strong>  The index of the quantity in case multiple quantities exist. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The units of the specified quantity as a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">pt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">AntiStokes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AS&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.save_image_to_OMETiff", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.save_image_to_OMETiff", "kind": "function", "doc": "<p>Saves the image corresponding to the specified quantity and index to an OMETiff file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qt (Quantity):</strong>  The quantity to retrieve the image for (e.g. shift).</li>\n<li><strong>pt (PeakType, optional):</strong>  The type of peak to consider (default is PeakType.AntiStokes).</li>\n<li><strong>index (int, optional):</strong>  The index of the data to retrieve, if multiple are present (default is 0).</li>\n<li><strong>filename (str, optional):</strong>  The name of the file to save the image to. If None, a default name will be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The path to the saved OMETiff file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">pt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">AntiStokes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AS&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.get_image", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.get_image", "kind": "function", "doc": "<p>Retrieves an image (spatial map) based on the specified quantity, peak type, and index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qt (Quantity):</strong>  The quantity to retrieve the image for (e.g. shift).</li>\n<li><strong>pt (PeakType, optional):</strong>  The type of peak to consider (default is PeakType.AntiStokes).</li>\n<li><strong>index (int, optional):</strong>  The index of the data to retrieve, if multiple are present (default is 0).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple containing the image corresponding to the specified quantity and index and the corresponding pixel size.\n  The image is a 3D dataset where the dimensions are z, y, x.\n  If there are additional parameters, more dimensions are added in the order z, y, x, par1, par2, ...\n  The pixel size is a tuple of 3 Metadata.Item in the order z, y, x.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">pt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">AntiStokes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AS&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.get_quantity_at_pixel", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.get_quantity_at_pixel", "kind": "function", "doc": "<p>Retrieves the specified quantity in the image at coord, based on the peak type and index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>coord (tuple):</strong>  A tuple of 3 elements corresponding to the z, y, x coordinate in the image</li>\n<li><strong>qt (Quantity):</strong>  The quantity to retrieve the image for (e.g. shift).</li>\n<li><strong>pt (PeakType, optional):</strong>  The type of peak to consider (default is PeakType.AntiStokes).</li>\n<li><strong>index (int, optional):</strong>  The index of the data to retrieve, if multiple are present (default is 0).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The requested quantity, which is a scalr or a multidimensional array (depending on whether there are additional parameters in the current Data group)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">coord</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">qt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">pt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">AntiStokes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AS&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.list_existing_peak_types", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.list_existing_peak_types", "kind": "function", "doc": "<p>Returns a tuple of existing peak types (Stokes and/or AntiStokes) for the specified index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (int, optional):</strong>  The index of the peak to check (in case of multi-peak fit). Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing <code>PeakType</code> members (<code>Stokes</code>, <code>AntiStokes</code>) that exist for the given index.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.AnalysisResults.list_existing_quantities", "modulename": "brimfile.data", "qualname": "Data.AnalysisResults.list_existing_quantities", "kind": "function", "doc": "<p>Returns a tuple of existing quantities for the specified index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (int, optional):</strong>  The index of the peak to check (in case of multi-peak fit). Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing <code>Quantity</code> members that exist for the given index.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pt</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span><span class=\"o\">.</span><span class=\"n\">PeakType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">PeakType</span><span class=\"o\">.</span><span class=\"n\">AntiStokes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AS&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.get_metadata", "modulename": "brimfile.data", "qualname": "Data.get_metadata", "kind": "function", "doc": "<p>Returns the metadata associated with the current Data group\nNote that this contains both the general metadata stored in the file (which might be redifined by the specific data group)\nand the ones specific for this data group</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.get_num_parameters", "modulename": "brimfile.data", "qualname": "Data.get_num_parameters", "kind": "function", "doc": "<p>Retrieves the number of parameters</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: The shape of the parameters if they exist, otherwise an empty tuple.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.get_parameters", "modulename": "brimfile.data", "qualname": "Data.get_parameters", "kind": "function", "doc": "<p>Retrieves the parameters  and their associated names.</p>\n\n<p>If PSD.ndims &gt; 2, the parameters are stored in a separate dataset.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A tuple containing the parameters and their names if there are any, otherwise None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.create_analysis_results_group_raw", "modulename": "brimfile.data", "qualname": "Data.create_analysis_results_group_raw", "kind": "function", "doc": "<p>Adds a new AnalysisResults entry to the current data group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_AntiStokes (list[dict]):</strong>  see documentation for AnalysisResults.add_data</li>\n<li><strong>data_Stokes (list[dict]):</strong>  same as data_AntiStokes for the Stokes peaks.</li>\n<li><strong>index (int, optional):</strong>  The index for the new data entry. If None, the next available index is used. Defaults to None.</li>\n<li><strong>name (str, optional):</strong>  The name for the new Analysis group. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>AnalysisResults: The newly created AnalysisResults object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IndexError:</strong>  If the specified index already exists in the dataset.</li>\n<li><strong>ValueError:</strong>  If any of the data provided is not valid or consistent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_AntiStokes</span>,</span><span class=\"param\">\t<span class=\"n\">data_Stokes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.list_AnalysisResults", "modulename": "brimfile.data", "qualname": "Data.list_AnalysisResults", "kind": "function", "doc": "<p>List all AnalysisResults groups in the current data group.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of dictionaries, each containing:\n      - 'name' (str): The name of the AnalysisResults group.\n      - 'index' (int): The index extracted from the group name.\n      - 'custom_name' (str, optional): if retrieve_custom_name==True, it contains the name of the AnalysisResults group as returned from utils.get_object_name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">retrieve_custom_name</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.get_analysis_results", "modulename": "brimfile.data", "qualname": "Data.get_analysis_results", "kind": "function", "doc": "<p>Returns the AnalysisResults at the specified index</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>index (int)                </li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IndexError:</strong>  If there is no analysis with the corresponding index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span><span class=\"o\">.</span><span class=\"n\">AnalysisResults</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.add_data", "modulename": "brimfile.data", "qualname": "Data.add_data", "kind": "function", "doc": "<p>Add data to the current data group.</p>\n\n<p>This method adds the provided PSD, frequency, and scanning data to the HDF5 group \nassociated with this <code>Data</code> object. It validates the inputs to ensure they meet \nthe required specifications before adding them.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>PSD (np.ndarray):</strong>  A 2D numpy array representing the Power Spectral Density (PSD) data.</li>\n<li><strong>frequency (np.ndarray):</strong>  A 1D or 2D numpy array representing the frequency data. \nIt must be broadcastable to the shape of the PSD array.</li>\n<li><strong>scanning (dict):</strong>  A dictionary containing scanning-related data. It may include:\n<ul>\n<li>'Spatial_map' (optional): A dictionary containing (up to) 3 arrays (x, y, z) and a string (units)</li>\n<li>'Cartesian_visualisation' (optional): A 3D numpy array containing the association between spatial position and spectra.\nIt must have integer values between 0 and PSD.shape[0]-1, or -1 for invalid entries.</li>\n<li>'Cartesian_visualisation_pixel' (optional): A list or array of 3 float values \nrepresenting the pixel size in the z, y, and x dimensions.</li>\n<li>'Cartesian_visualisation_pixel_unit' (optional): A string representing the unit of the pixel size (e.g. 'um').</li>\n</ul></li>\n<li><strong>timestamp (np.ndarray):</strong>  the timestamp associated with each spectrum.\nIt must be a 1D array with the same length as the PSD array.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If any of the data provided is not valid or consistent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">PSD</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">frequency</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">scanning</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">freq_units</span><span class=\"o\">=</span><span class=\"s1\">&#39;GHz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.data.Data.list_data_groups", "modulename": "brimfile.data", "qualname": "Data.list_data_groups", "kind": "function", "doc": "<p>List all data groups in the brim file.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of dictionaries, each containing:\n      - 'name' (str): The name of the data group in the file.\n      - 'index' (int): The index extracted from the group name.\n      - 'custom_name' (str, optional): if retrieve_custom_name==True, it contains the name of the data group as returned from utils.get_object_name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>,</span><span class=\"param\">\t<span class=\"n\">retrieve_custom_name</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file", "modulename": "brimfile.file", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.file.File", "modulename": "brimfile.file", "qualname": "File", "kind": "class", "doc": "<p>Represents a brim file with Brillouin data, extending h5py.File.</p>\n"}, {"fullname": "brimfile.file.File.__init__", "modulename": "brimfile.file", "qualname": "File.__init__", "kind": "function", "doc": "<p>Initialize the File object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  Path to the brim file.</li>\n<li><strong>store_type (str):</strong>  Type of the store to use ('zip', 'zarr', 'remote', 'auto'). Default is 'auto'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;r&#39;</span>, </span><span class=\"param\"><span class=\"n\">store_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zip&#39;</span></span>)</span>"}, {"fullname": "brimfile.file.File.close", "modulename": "brimfile.file", "qualname": "File.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.is_read_only", "modulename": "brimfile.file", "qualname": "File.is_read_only", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.is_valid", "modulename": "brimfile.file", "qualname": "File.is_valid", "kind": "function", "doc": "<p>Check if the file is a valid brim file.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the file is valid, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.create", "modulename": "brimfile.file", "qualname": "File.create", "kind": "function", "doc": "<p>Create a new brim file with the specified filename. If the file exists already it will generate an error.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  Path to the brim file to be created.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>File: An instance of the File class representing the newly created brim file.\n  store_type (str): Type of the store to use ('zip', 'zarr', 'remote'). Default is 'zip'.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">store_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zip&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.create_data_group", "modulename": "brimfile.file", "qualname": "File.create_data_group", "kind": "function", "doc": "<p>Adds a new data entry to the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>PSD (np.ndarray):</strong>  The Power Spectral Density (PSD) data to be added. It must be 4D with dimensions z, y, x, spectrum</li>\n<li><strong>frequency (np.ndarray):</strong>  The frequency data corresponding to the PSD. It must be 4D or 1D (in which case the frequency axis is assumed the same for all the spatial coordinates)</li>\n<li><strong>px_size_um (tuple):</strong>  A tuple of 3 elements, in the order z,y,x, corresponding to the pixel size in um</li>\n<li><strong>index (int, optional):</strong>  The index for the new data group. If None, the next available index is used. Defaults to None.</li>\n<li><strong>name (str, optional):</strong>  The name for the new data group. Defaults to None.</li>\n<li><strong>compression (FileAbstraction.Compression, optional):</strong>  The compression method to use for the data. Defaults to FileAbstraction.Compression.DEFAULT.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Data: The newly created Data object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IndexError:</strong>  If the specified index already exists in the dataset.</li>\n<li><strong>ValueError:</strong>  If any of the data provided is not valid or consistent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">PSD</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">frequency</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">px_size_um</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.create_data_group_raw", "modulename": "brimfile.file", "qualname": "File.create_data_group_raw", "kind": "function", "doc": "<p>Adds a new data entry to the file. Check the documentation for Data.add_data for more details on the parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>PSD (np.ndarray):</strong>  The Power Spectral Density (PSD) data to be added.</li>\n<li><strong>frequency (np.ndarray):</strong>  The frequency data corresponding to the PSD.</li>\n<li><strong>scanning (dict):</strong>  Metadata related to the scanning process. See Data.add_data for more details.</li>\n<li><strong>timestamp (np.ndarray, optional):</strong>  Timestamps in milliseconds for the data. Defaults to None.</li>\n<li><strong>index (int, optional):</strong>  The index for the new data group. If None, the next available index is used. Defaults to None.</li>\n<li><strong>name (str, optional):</strong>  The name for the new data group. Defaults to None.</li>\n<li><strong>compression (FileAbstraction.Compression, optional):</strong>  The compression method to use for the data. Defaults to FileAbstraction.Compression.DEFAULT.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Data: The newly created Data object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IndexError:</strong>  If the specified index already exists in the dataset.</li>\n<li><strong>ValueError:</strong>  If any of the data provided is not valid or consistent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">PSD</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">frequency</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">scanning</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.list_data_groups", "modulename": "brimfile.file", "qualname": "File.list_data_groups", "kind": "function", "doc": "<p>List all data groups in the brim file.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>See documentation of brimfile.data.Data.list_data_groups</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">retrieve_custom_name</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.get_data", "modulename": "brimfile.file", "qualname": "File.get_data", "kind": "function", "doc": "<p>Retrieve a Data object for the specified index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (int):</strong>  The index of the data group to retrieve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Data: The Data object corresponding to the specified index.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file.File.filename", "modulename": "brimfile.file", "qualname": "File.filename", "kind": "variable", "doc": "<p>Get the filename of the brim file.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The filename of the brim file.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "brimfile.file_abstraction", "modulename": "brimfile.file_abstraction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.file_abstraction.use_h5", "modulename": "brimfile.file_abstraction", "qualname": "use_h5", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "brimfile.file_abstraction.FileAbstraction", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction", "kind": "class", "doc": "<p>Abstract base class that rapresents a general interface to work with brim files.</p>\n\n<p>This class defines a common interface for file operations, such as creating attributes,\nretrieving attributes, and managing groups and datasets. It is designed to be extended\nby specific file implementations, such as HDF5 or Zarr.</p>\n\n<p>All the methods which require a path to an exixsting object in the file, will accept\neither the object itself (as defined by the specific implementation) or its path as a string.</p>\n", "bases": "abc.ABC"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.create_attr", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.create_attr", "kind": "function", "doc": "<p>Create an attribute in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  object that supports the creation of an attribute (e.g. group or dataset) or its path as a string.</li>\n<li><strong>name (str):</strong>  Name of the attribute.</li>\n<li><strong>data:</strong>  Data for the attribute.</li>\n<li><strong>**kwargs:</strong>  Additional arguments for attribute creation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.get_attr", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.get_attr", "kind": "function", "doc": "<p>Return the data of an attribute in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  object that supports the creation of an attribute (e.g. group or dataset) or its path as a string.</li>\n<li><strong>name (str):</strong>  Name of the attribute.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the attribute does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.open_group", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.open_group", "kind": "function", "doc": "<p>Open a group in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>full_path (str):</strong>  Path to the group.</li>\n<li><strong>**kwargs:</strong>  Additional arguments for opening the group.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.create_group", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.create_group", "kind": "function", "doc": "<p>Create a group in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>full_path (str):</strong>  Path to the group.</li>\n<li><strong>**kwargs:</strong>  Additional arguments for creating the group.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression", "kind": "class", "doc": "<p>Compression options for datasets.</p>\n"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.__init__", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.NONE", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.DEFAULT", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.DEFAULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.ZLIB", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.ZLIB", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.LZF", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.LZF", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.type", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.Compression.level", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.Compression.level", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.open_dataset", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.open_dataset", "kind": "function", "doc": "<p>Open a dataset in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>full_path (str):</strong>  Path to the dataset.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dataset object which must support numpy indexing and slicing.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.create_dataset", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.create_dataset", "kind": "function", "doc": "<p>Create a dataset in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parent_group:</strong>  Group in which to create the dataset or its path as a string.</li>\n<li><strong>name (str):</strong>  Name of the dataset.</li>\n<li><strong>data:</strong>  Data for the dataset.</li>\n<li><strong>chunk_size (tuple, optional):</strong>  Chunk size for the dataset. If None the automatically computed size will be used.</li>\n<li><strong>compression (FileAbstraction.Compression, optional):</strong>  Compression options for the dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">parent_group</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.list_objects", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.list_objects", "kind": "function", "doc": "<p>Lists the objects (groups or datasets) contained within one hierarchical level below the given object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  parent object or its path as a string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of strings representing the names of the objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.object_exists", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.object_exists", "kind": "function", "doc": "<p>Check if an object exists in the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>full_path (str):</strong>  Path to the object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the object exists, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.list_attributes", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.list_attributes", "kind": "function", "doc": "<p>Lists the attributes attached to the specified object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  object or its path as a string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of strings representing the names of the attributes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.close", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.close", "kind": "function", "doc": "<p>Close the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.file_abstraction.FileAbstraction.is_read_only", "modulename": "brimfile.file_abstraction", "qualname": "FileAbstraction.is_read_only", "kind": "function", "doc": "<p>Check if the file is read-only.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the file is read-only, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.metadata", "modulename": "brimfile.metadata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.metadata.Metadata", "modulename": "brimfile.metadata", "qualname": "Metadata", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "brimfile.metadata.Metadata.__init__", "modulename": "brimfile.metadata", "qualname": "Metadata.__init__", "kind": "function", "doc": "<p>Initialize the Metadata object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>file (FileAbstraction).</li>\n<li><strong>data_full_path (str):</strong>  The full path to the data group in the file. If None, only the metadata in the file are exposed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>,</span><span class=\"param\">\t<span class=\"n\">data_full_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "brimfile.metadata.Metadata.Item", "modulename": "brimfile.metadata", "qualname": "Metadata.Item", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "brimfile.metadata.Metadata.Item.__init__", "modulename": "brimfile.metadata", "qualname": "Metadata.Item.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "brimfile.metadata.Metadata.Item.value", "modulename": "brimfile.metadata", "qualname": "Metadata.Item.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brimfile.metadata.Metadata.Item.units", "modulename": "brimfile.metadata", "qualname": "Metadata.Item.units", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brimfile.metadata.Metadata.Type", "modulename": "brimfile.metadata", "qualname": "Metadata.Type", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.Type.Experiment", "modulename": "brimfile.metadata", "qualname": "Metadata.Type.Experiment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.Experiment: &#x27;Experiment&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.Type.Optics", "modulename": "brimfile.metadata", "qualname": "Metadata.Type.Optics", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.Optics: &#x27;Optics&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.Type.Brillouin", "modulename": "brimfile.metadata", "qualname": "Metadata.Type.Brillouin", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.Brillouin: &#x27;Brillouin&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.Type.Acquisition", "modulename": "brimfile.metadata", "qualname": "Metadata.Type.Acquisition", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.Acquisition: &#x27;Acquisition&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.Type.Spectrometer", "modulename": "brimfile.metadata", "qualname": "Metadata.Type.Spectrometer", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.Spectrometer: &#x27;Spectrometer&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.to_dict", "modulename": "brimfile.metadata", "qualname": "Metadata.to_dict", "kind": "function", "doc": "<p>Returns the metadata of a specific type as a dictionary.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary containing all metadata attributes, where each element is of the type Item.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.metadata.Metadata.add", "modulename": "brimfile.metadata", "qualname": "Metadata.add", "kind": "function", "doc": "<p>Add metadata to the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>type (Type):</strong>  The type of the metadata to add.</li>\n<li><strong>metadata (dict):</strong>  A dictionary containing the metadata attributes to add.\nEach element must be of the type Item.</li>\n<li><strong>local (bool):</strong>  If True, the metadata will be added to the data group. Otherwise, it will be added to the general metadata group.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">Type</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">local</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.metadata.Metadata.all_to_dict", "modulename": "brimfile.metadata", "qualname": "Metadata.all_to_dict", "kind": "function", "doc": "<p>Returns all the metadata as a dictionary.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary containing all the elements in Metadata.Type as a key.\n          Each of the key is defining a dictionary, as returned by Metadata.to_dict()</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.metadata.Metadata.ImmersionMedium", "modulename": "brimfile.metadata", "qualname": "Metadata.ImmersionMedium", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.ImmersionMedium.other", "modulename": "brimfile.metadata", "qualname": "Metadata.ImmersionMedium.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImmersionMedium.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ImmersionMedium.air", "modulename": "brimfile.metadata", "qualname": "Metadata.ImmersionMedium.air", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImmersionMedium.air: &#x27;air&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ImmersionMedium.water", "modulename": "brimfile.metadata", "qualname": "Metadata.ImmersionMedium.water", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImmersionMedium.water: &#x27;water&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ImmersionMedium.oil", "modulename": "brimfile.metadata", "qualname": "Metadata.ImmersionMedium.oil", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImmersionMedium.oil: &#x27;oil&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SignalType", "modulename": "brimfile.metadata", "qualname": "Metadata.SignalType", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.SignalType.other", "modulename": "brimfile.metadata", "qualname": "Metadata.SignalType.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SignalType.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SignalType.spontaneous", "modulename": "brimfile.metadata", "qualname": "Metadata.SignalType.spontaneous", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SignalType.spontaneous: &#x27;spontaneous&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SignalType.stimulated", "modulename": "brimfile.metadata", "qualname": "Metadata.SignalType.stimulated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SignalType.stimulated: &#x27;stimulated&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SignalType.time_resolved", "modulename": "brimfile.metadata", "qualname": "Metadata.SignalType.time_resolved", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SignalType.time_resolved: &#x27;time_resolved&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PhononsMeasured", "modulename": "brimfile.metadata", "qualname": "Metadata.PhononsMeasured", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.PhononsMeasured.other", "modulename": "brimfile.metadata", "qualname": "Metadata.PhononsMeasured.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PhononsMeasured.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PhononsMeasured.longitudinal", "modulename": "brimfile.metadata", "qualname": "Metadata.PhononsMeasured.longitudinal", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PhononsMeasured.longitudinal: &#x27;longitudinal-like&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PhononsMeasured.transverse", "modulename": "brimfile.metadata", "qualname": "Metadata.PhononsMeasured.transverse", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PhononsMeasured.transverse: &#x27;transverse-like&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PhononsMeasured.longitudinal_Transverse", "modulename": "brimfile.metadata", "qualname": "Metadata.PhononsMeasured.longitudinal_Transverse", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PhononsMeasured.longitudinal_Transverse: &#x27;longitudinal-transverse-like&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.other", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.VH", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.VH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.VH: &#x27;VH&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.HV", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.HV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.HV: &#x27;HV&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.HH", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.HH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.HH: &#x27;HH&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.VV", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.VV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.VV: &#x27;VV&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.V_Unpolarized", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.V_Unpolarized", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.V_Unpolarized: &#x27;V-unpolarized&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.PolarizationProbedAnalyzed.Circular_Circular", "modulename": "brimfile.metadata", "qualname": "Metadata.PolarizationProbedAnalyzed.Circular_Circular", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PolarizationProbedAnalyzed.Circular_Circular: &#x27;circular-circular&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ScanningStrategy", "modulename": "brimfile.metadata", "qualname": "Metadata.ScanningStrategy", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.ScanningStrategy.other", "modulename": "brimfile.metadata", "qualname": "Metadata.ScanningStrategy.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanningStrategy.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ScanningStrategy.point_scanning", "modulename": "brimfile.metadata", "qualname": "Metadata.ScanningStrategy.point_scanning", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanningStrategy.point_scanning: &#x27;point_scanning&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ScanningStrategy.line_scanning", "modulename": "brimfile.metadata", "qualname": "Metadata.ScanningStrategy.line_scanning", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanningStrategy.line_scanning: &#x27;line_scanning&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ScanningStrategy.light_sheet", "modulename": "brimfile.metadata", "qualname": "Metadata.ScanningStrategy.light_sheet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanningStrategy.light_sheet: &#x27;light_sheet&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.ScanningStrategy.time_resolved", "modulename": "brimfile.metadata", "qualname": "Metadata.ScanningStrategy.time_resolved", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanningStrategy.time_resolved: &#x27;time_resolved&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.other", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.VIPA", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.VIPA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.VIPA: &#x27;VIPA&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.FP", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.FP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.FP: &#x27;Fabry_Perot&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.stimulated", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.stimulated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.stimulated: &#x27;stimulated&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.heterodyne", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.heterodyne", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.heterodyne: &#x27;heterodyne&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.time_domain", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.time_domain", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.time_domain: &#x27;time_domain&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.SpectrometerType.impulsive", "modulename": "brimfile.metadata", "qualname": "Metadata.SpectrometerType.impulsive", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SpectrometerType.impulsive: &#x27;impulsive&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.other", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.other: &#x27;other&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.EMCCD", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.EMCCD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.EMCCD: &#x27;EMCCD&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.CCD", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.CCD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.CCD: &#x27;CCD&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.sCMOS", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.sCMOS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.sCMOS: &#x27;sCMOS&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.PMT", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.PMT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.PMT: &#x27;PMT&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.balanced", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.balanced", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.balanced: &#x27;balanced&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.single_PD", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.single_PD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.single_PD: &#x27;single_PD&#x27;&gt;"}, {"fullname": "brimfile.metadata.Metadata.DetectorType.single_APD", "modulename": "brimfile.metadata", "qualname": "Metadata.DetectorType.single_APD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DetectorType.single_APD: &#x27;single_APD&#x27;&gt;"}, {"fullname": "brimfile.units", "modulename": "brimfile.units", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.units.of_object", "modulename": "brimfile.units", "qualname": "of_object", "kind": "function", "doc": "<p>Get the units of a given object in a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>file (FileAbstraction)</li>\n<li><strong>obj:</strong>  The object for which to retrieve the units, as accepted by FileAbstraction.get_attr.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The units of the object. If the units are not found, an empty string is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.units.add_to_object", "modulename": "brimfile.units", "qualname": "add_to_object", "kind": "function", "doc": "<p>Set the units of a given object in a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>file (FileAbstraction)</li>\n<li><strong>obj:</strong>  The object for which to retrieve the units, as accepted by FileAbstraction.get_attr.</li>\n<li><strong>units (str):</strong>  The units to set for the object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.units.of_attribute", "modulename": "brimfile.units", "qualname": "of_attribute", "kind": "function", "doc": "<p>Get the units of an attribute attached to a given object in a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>file (FileAbstraction)</li>\n<li><strong>obj:</strong>  The object to which the attribute is attached, as accepted by FileAbstraction.get_attr.</li>\n<li><strong>attr_name (str):</strong>  The name of the attribute for which to retrieve the units.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The units of the attribute. If the units are not found, an empty string is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.units.add_to_attribute", "modulename": "brimfile.units", "qualname": "add_to_attribute", "kind": "function", "doc": "<p>Set the units of a given attribute in a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>file (FileAbstraction)</li>\n<li><strong>obj:</strong>  The object for which to retrieve the units, as accepted by FileAbstraction.get_attr.</li>\n<li><strong>units (str):</strong>  The units to set for the object.</li>\n<li><strong>attr_name (str):</strong>  The name of the attribute for which to set the units.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.utils", "modulename": "brimfile.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brimfile.utils.concatenate_paths", "modulename": "brimfile.utils", "qualname": "concatenate_paths", "kind": "function", "doc": "<p>Concatenate multiple paths into a single path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*paths:</strong>  Paths to concatenate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The concatenated path. The concatenated path will have a leading '/' but no trailing '/'.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">paths</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brimfile.utils.list_objects_matching_pattern", "modulename": "brimfile.utils", "qualname": "list_objects_matching_pattern", "kind": "function", "doc": "<p>Lists objects within a parent object that match a given regular expression pattern.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file (FileAbstraction):</strong>  An abstraction representing the file system or storage \nwhere objects are listed.</li>\n<li><strong>parent_obj:</strong>  The parent object containing the objects to be matched.</li>\n<li><strong>regexp (str):</strong>  A regular expression pattern to match object names.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of tuples containing the matched object names and their corresponding capturing groups as string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>,</span><span class=\"param\">\t<span class=\"n\">parent_obj</span>,</span><span class=\"param\">\t<span class=\"n\">regexp</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.utils.get_object_name", "modulename": "brimfile.utils", "qualname": "get_object_name", "kind": "function", "doc": "<p>Returns the name of the object.</p>\n\n<p>The name is retrieved from the 'Name' attribute attached to the object.\nIf the attribute is not found, the last part of the path is returned instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>, </span><span class=\"param\"><span class=\"n\">obj_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "brimfile.utils.set_object_name", "modulename": "brimfile.utils", "qualname": "set_object_name", "kind": "function", "doc": "<p>Set the name of the object.</p>\n\n<p>The name is set by attaching a 'Name' attribute to the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">brimfile</span><span class=\"o\">.</span><span class=\"n\">file_abstraction</span><span class=\"o\">.</span><span class=\"n\">FileAbstraction</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();